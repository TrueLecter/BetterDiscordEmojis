{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/constants.js","src/emoji.js","src/initializer.js","src/lib/clusterize.js","src/main.js","src/observer.js","src/picker.js","src/server.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","API_BASE","id","webpackJsonp","EMOJI_PICKER_PATH","LOCAL_STORAGE_MODULE","EMOJI_STORAGE_MODULE","default","TRANSLATION_MODULE","TOKEN_KEY","ELEMENT_SCROLLER_WRAP","ELEMENT_SEARCH_INPUT","ELEMENT_SERVER_EMOJI_LIST","ELEMENT_SERVER_EMOJI_LIST_ROW","ELEMENT_SERVER_EMOJI_LIST_ROW_ENTRY","REACTION_POPOUT_REGEX","CURRENT_SELECTED_CHANNEL_REGEX","IS_INBOX_REGEX","IS_NUMBER_REGEX","Symbol","name","url","managed","requireColons","roles","GLOBAL_EMOJI_MAP","Map","Emoji","[object Object]","_id","_name","_managed","_requireColons","_roles","_url","this","set","isManaged","colonsRequired","useName","emojiRaw","get","Server","Constants","Picker","MY_ID","getServers","Promise","resolve","reject","$","ajax","async","method","then","res","fail","err","getMyId","response","parseServer","server","done","myRoles","srv","permissions","emojis","forEach","emoji","fromRaw","eR","addEmoji","includes","parseServers","serversA","all","map","loadStandartEmojis","commonEmojis","translation","Messages","categories","getCategories","commonEmojisSpansCacheSpan","category","tr","toUpperCase","fakeServer","getByCategory","uniqueName","allNamesString","defaultUrl","push","append","buildServerSpan","spanCache","html","doGetEmojis","token","impl","ajaxSetup","crossDomain","headers","authorization","catch","console","error","definition","define","amd","ie","v","el","document","createElement","innerHTML","documentMode","is_mac","navigator","platform","toLowerCase","indexOf","Clusterize","data","self","defaults","rows_in_block","blocks_in_cluster","tag","show_no_data_row","no_data_class","no_data_text","keep_parity","callbacks","options","option","elems","elem","getElementById","content_elem","hasAttribute","setAttribute","rows","isArray","fetchMarkup","cache","scroll_top","scroll_elem","scrollTop","insertToDOM","last_cluster","scroll_debounce","pointer_events_set","scrollEv","style","pointerEvents","clearTimeout","setTimeout","getClusterNum","scrollingProgress","getScrollProgress","resize_debounce","resizeEv","refresh","on","window","destroy","clean","off","generateEmptyRow","join","force","getRowsHeight","update","new_rows","item_height","clear","getRowsAmount","add","where","_new_rows","concat","prepend","prototype","constructor","rows_nodes","getChildNodes","shift","outerHTML","exploreEnvironment","opts","content_tag","tagName","match","children","prev_item_height","cluster_height","nodes","node","Math","floor","offsetHeight","getStyle","parseInt","marginTop","marginBottom","max","block_height","rows_in_cluster","empty_row","no_data_content","createTextNode","td","className","colSpan","appendChild","generate","cluster_num","rows_len","top_offset","bottom_offset","rows_above","items_start","items_end","this_cluster_rows","renderExtraTag","class_name","height","clusterize_prefix","this_cluster_content_changed","checkChanges","top_offset_changed","only_bottom_offset_changed","layout","clusterWillChange","clusterChanged","lastChild","div","last","removeChild","firstChild","child_nodes","ii","type","value","changed","evt","element","fnc","addEventListener","attachEvent","removeEventListener","detachEvent","arr","Object","toString","prop","getComputedStyle","currentStyle","Observer","ChildAddRemoveObserver","initEmojis","attachPickerObserver","better_emojis","pickerObserver","disconnect","find","hasClass","show","current_cluster","reattach","observe","setCommonEmojiSpanCache","log","observer","addListeners","removeListeners","target","addListener","removeListener","MutationObserver","mutation","addedNodes","listener","removedNodes","remove","Node","TypeError","childList","commonEmojisSpansCache","SCROLLER_WRAP","SCROLLER_WRAP_OLD","SEARCH_INPUT","buildScrollerWrap","scr","c","getCurrentServer","canUseExternalEmojis","getAllServers","isCurrent","sharedEmojis","test","scrollElem","contentElem","emojiClickHandler","putEmojiInTextarea","addCurrentMessageReaction","getById","attr","addClass","removeClass","buildEmojisRows","availableEmojis","eL","emojiElement","css","textarea","val","findReact","dom","key","startsWith","getSelectedMessageId","exec","closest","_currentElement","props","filter","keys","subscribeTo","getCurrentSelectedChannel","location","pathname","addMessageReaction","channel","message","showOriginalScroller","hide","parent","showCustomScroller","replaceScroller","before","replaceSearchInput","picker","not","addCustomScrollerParts","categoriesChildren","customScroller","event","$this","GLOBAL_SERVER_LIST","serverRegex","_permissions","_emojis","_sharedEmojis","some","RegExp","list","reduce","p"],"mappings":"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","file":"deploy/better-emojis.min.js","sourceRoot":"","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports.API_BASE = 'https://discordapp.com/api'\r\n\r\nfunction n (id) {\r\n  return webpackJsonp([], [], [id])\r\n}\r\n\r\n/* May be changed with discord updates */\r\nmodule.exports.EMOJI_PICKER_PATH = '#app-mount > div > div:nth-child(7)'\r\nmodule.exports.LOCAL_STORAGE_MODULE = n(1590)\r\nmodule.exports.EMOJI_STORAGE_MODULE = n(168).default\r\nmodule.exports.TRANSLATION_MODULE = n(3)\r\nmodule.exports.TOKEN_KEY = n(0).TOKEN_KEY\r\n/* May be changed with discord updates.END */\r\n\r\nmodule.exports.ELEMENT_SCROLLER_WRAP = '<div class=\"scroller-wrap tl-emoji-scroller-wrap\"><div class=\"scroller\"></div></div>'\r\n\r\nmodule.exports.ELEMENT_SEARCH_INPUT = '<input type=\"text\" placeholder=\"Find the perfect emoji\" value=\"\">'\r\n\r\nmodule.exports.ELEMENT_SERVER_EMOJI_LIST = '<span class=\"server-emojis\"><div class=\"category\">server.name</div></span>'\r\nmodule.exports.ELEMENT_SERVER_EMOJI_LIST_ROW = '<div class=\"row\"></div>'\r\nmodule.exports.ELEMENT_SERVER_EMOJI_LIST_ROW_ENTRY = '<div class=\"emoji-item\"></div>' // max 10 per row\r\n\r\nmodule.exports.REACTION_POPOUT_REGEX = /TOGGLE_REACTION_POPOUT_(\\d+)/\r\nmodule.exports.CURRENT_SELECTED_CHANNEL_REGEX = /.*\\/.+\\/(\\d+)/\r\nmodule.exports.IS_INBOX_REGEX = /\\/channels\\/@me\\/\\d+/\r\n\r\nmodule.exports.IS_NUMBER_REGEX = /\\d+/\r\n","const id = Symbol('id')\r\nconst name = Symbol('name')\r\nconst url = Symbol('url')\r\nconst managed = Symbol('managed')\r\nconst requireColons = Symbol('requireColons')\r\nconst roles = Symbol('roles')\r\n\r\nconst GLOBAL_EMOJI_MAP = new Map()\r\n\r\nclass Emoji {\r\n  constructor (_id, _name, _managed = false, _requireColons = true, _roles = [], _url = `https://cdn.discordapp.com/emojis/${_id}.png`) {\r\n    this[id] = _id\r\n    this[name] = _name\r\n    this[url] = _url\r\n    this[managed] = _managed\r\n    this[requireColons] = _requireColons\r\n    this[roles] = _roles\r\n\r\n    GLOBAL_EMOJI_MAP.set(this[id], this)\r\n  }\r\n\r\n  get id () {\r\n    return this[id]\r\n  }\r\n\r\n  get name () {\r\n    return this[name]\r\n  }\r\n\r\n  get url () {\r\n    return this[url]\r\n  }\r\n\r\n  get isManaged () {\r\n    return this[managed]\r\n  }\r\n\r\n  get colonsRequired () {\r\n    return this[requireColons]\r\n  }\r\n\r\n  get roles () {\r\n    return this[roles]\r\n  }\r\n\r\n  get useName () {\r\n    return this.colonsRequired ? `:${this.name}:` : this.name\r\n  }\r\n\r\n  static fromRaw (emojiRaw) {\r\n    return new Emoji(emojiRaw.id, emojiRaw.name, emojiRaw.managed, emojiRaw.requireColons, emojiRaw.roles)\r\n  }\r\n\r\n  static getById (id) {\r\n    return GLOBAL_EMOJI_MAP.get(id)\r\n  }\r\n}\r\n\r\nmodule.exports = Emoji\r\n","const Server = require('./server.js')\r\nconst Emoji = require('./emoji.js')\r\nconst Constants = require('./constants.js')\r\nconst Picker = require('./picker.js')\r\n\r\nlet MY_ID = ''\r\n\r\nfunction getServers () {\r\n  return new Promise((resolve, reject) => {\r\n    $.ajax({\r\n      'async': true,\r\n      'url': `${Constants.API_BASE}/users/@me/guilds`,\r\n      'method': 'GET'\r\n    })\r\n    .then(res => resolve(res))\r\n    .fail(err => reject(err))\r\n  })\r\n}\r\n\r\nfunction getMyId () {\r\n  return new Promise((resolve, reject) => {\r\n    $.ajax({\r\n      'async': true,\r\n      'url': `${Constants.API_BASE}/users/@me`,\r\n      'method': 'GET'\r\n    })\r\n    .then(response => {\r\n      MY_ID = response.id\r\n    })\r\n    .then(res => resolve(res))\r\n    .fail(err => reject(err))\r\n  })\r\n}\r\n\r\nfunction parseServer (server) {\r\n  return new Promise((resolve, reject) => {\r\n    $.ajax({\r\n      'async': true,\r\n      'url': `${Constants.API_BASE}/guilds/${server.id}/members/${MY_ID}`,\r\n      'method': 'GET'\r\n    }).done(response => {\r\n      const myRoles = response.roles\r\n      $.ajax({\r\n        'async': true,\r\n        'url': `${Constants.API_BASE}/guilds/${server.id}`,\r\n        'method': 'GET'\r\n      }).done(response => {\r\n        // now we got detailed info about server. fill emoji and managed emojis.\r\n        // also set name\r\n        const srv = new Server(response.id, response.name, server.permissions)\r\n\r\n        response.emojis.forEach(emojiRaw => {\r\n          // get emoji required roles\r\n          const emoji = Emoji.fromRaw(emojiRaw)\r\n          const eR = emoji.roles\r\n\r\n          if (!eR.length) {\r\n            srv.addEmoji(emoji)\r\n            return\r\n          }\r\n\r\n          for (const r in eR) {\r\n            // we have required role\r\n            if (myRoles.includes(r)) {\r\n              srv.addEmoji(emoji)\r\n              break\r\n            }\r\n          }\r\n        })\r\n        resolve(srv)\r\n      })\r\n    })\r\n  })\r\n}\r\n\r\nfunction parseServers (serversA) {\r\n  return Promise.all(serversA.map(srv => parseServer(srv)))\r\n}\r\n\r\nfunction loadStandartEmojis () {\r\n  let commonEmojis = []\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const translation = Constants.TRANSLATION_MODULE.Messages\r\n    const categories = Constants.EMOJI_STORAGE_MODULE.getCategories()\r\n    let commonEmojisSpansCacheSpan = $('<span></span>')\r\n\r\n    for (let category of categories) {\r\n      const tr = translation[`EMOJI_CATEGORY_${category.toUpperCase()}`]\r\n      const fakeServer = new Server(tr, tr, 0x00040000)\r\n\r\n      const emojis = Constants.EMOJI_STORAGE_MODULE.getByCategory(category)\r\n\r\n      for (let emoji of emojis) {\r\n        fakeServer.addEmoji(new Emoji(emoji.uniqueName, emoji.uniqueName, emoji.managed, emoji.allNamesString.includes(':'), [], emoji.defaultUrl))\r\n      }\r\n\r\n      commonEmojis.push(fakeServer)\r\n      commonEmojisSpansCacheSpan.append(Picker.buildServerSpan(fakeServer))\r\n    }\r\n\r\n    resolve({emojis: commonEmojis, spanCache: commonEmojisSpansCacheSpan.html()})\r\n  })\r\n}\r\n\r\nfunction doGetEmojis () {\r\n  const token = Constants.LOCAL_STORAGE_MODULE.impl.get(Constants.TOKEN_KEY)\r\n\r\n  $.ajaxSetup({\r\n    'crossDomain': true,\r\n    'headers': { 'authorization': token }\r\n  })\r\n\r\n  return getMyId()\r\n    .then(getServers)\r\n    .then(parseServers)\r\n    .then(loadStandartEmojis)\r\n    .catch(e => { console.error('Error initializing Better Emojis!\\nProbably modules order has been changed\\n', e) })\r\n}\r\n\r\nmodule.exports = doGetEmojis\r\n","/*! Clusterize.js - v0.17.6 - 2017-03-05\r\n* http://NeXTs.github.com/Clusterize.js/\r\n* Copyright (c) 2015 Denis Lukov; Licensed GPLv3 */\r\n\r\n;(function (name, definition) {\r\n  if (typeof module !== 'undefined') module.exports = definition()\r\n  else if (typeof define === 'function' && typeof define.amd === 'object') define(definition)\r\n  else this[name] = definition()\r\n}('Clusterize', function () {\r\n  'use strict'\r\n\r\n  // detect ie9 and lower\r\n  // https://gist.github.com/padolsey/527683#comment-786682\r\n  var ie = (function () {\r\n      for (var v = 3,\r\n        el = document.createElement('b'),\r\n        all = el.all || [];\r\n         el.innerHTML = '<!--[if gt IE ' + (++v) + ']><i><![endif]-->',\r\n         all[0];\r\n       ) {}\r\n      return v > 4 ? v : document.documentMode\r\n    }()),\r\n    is_mac = navigator.platform.toLowerCase().indexOf('mac') + 1\r\n  var Clusterize = function (data) {\r\n    if (!(this instanceof Clusterize)) { return new Clusterize(data) }\r\n    var self = this\r\n\r\n    var defaults = {\r\n      rows_in_block: 50,\r\n      blocks_in_cluster: 4,\r\n      tag: null,\r\n      show_no_data_row: true,\r\n      no_data_class: 'clusterize-no-data',\r\n      no_data_text: 'No data',\r\n      keep_parity: true,\r\n      callbacks: {}\r\n    }\r\n\r\n    // public parameters\r\n    self.options = {}\r\n    var options = ['rows_in_block', 'blocks_in_cluster', 'show_no_data_row', 'no_data_class', 'no_data_text', 'keep_parity', 'tag', 'callbacks']\r\n    for (var i = 0, option; option = options[i]; i++) {\r\n      self.options[option] = typeof data[option] !== 'undefined' && data[option] != null\r\n        ? data[option]\r\n        : defaults[option]\r\n    }\r\n\r\n    var elems = ['scroll', 'content']\r\n    for (var i = 0, elem; elem = elems[i]; i++) {\r\n      self[elem + '_elem'] = data[elem + 'Id']\r\n        ? document.getElementById(data[elem + 'Id'])\r\n        : data[elem + 'Elem']\r\n      if (!self[elem + '_elem']) { throw new Error('Error! Could not find ' + elem + ' element') }\r\n    }\r\n\r\n    // tabindex forces the browser to keep focus on the scrolling list, fixes #11\r\n    if (!self.content_elem.hasAttribute('tabindex')) { self.content_elem.setAttribute('tabindex', 0) }\r\n\r\n    // private parameters\r\n    var rows = isArray(data.rows)\r\n        ? data.rows\r\n        : self.fetchMarkup(),\r\n      cache = {},\r\n      scroll_top = self.scroll_elem.scrollTop\r\n\r\n    // append initial data\r\n    self.insertToDOM(rows, cache)\r\n\r\n    // restore the scroll position\r\n    self.scroll_elem.scrollTop = scroll_top\r\n\r\n    // adding scroll handler\r\n    var last_cluster = false,\r\n      scroll_debounce = 0,\r\n      pointer_events_set = false,\r\n      scrollEv = function () {\r\n      // fixes scrolling issue on Mac #3\r\n        if (is_mac) {\r\n          if (!pointer_events_set) self.content_elem.style.pointerEvents = 'none'\r\n          pointer_events_set = true\r\n          clearTimeout(scroll_debounce)\r\n          scroll_debounce = setTimeout(function () {\r\n            self.content_elem.style.pointerEvents = 'auto'\r\n            pointer_events_set = false\r\n          }, 50)\r\n        }\r\n        if (last_cluster != (last_cluster = self.getClusterNum())) { self.insertToDOM(rows, cache) }\r\n        if (self.options.callbacks.scrollingProgress) { self.options.callbacks.scrollingProgress(self.getScrollProgress()) }\r\n      },\r\n      resize_debounce = 0,\r\n      resizeEv = function () {\r\n        clearTimeout(resize_debounce)\r\n        resize_debounce = setTimeout(self.refresh, 100)\r\n      }\r\n    on('scroll', self.scroll_elem, scrollEv)\r\n    on('resize', window, resizeEv)\r\n\r\n    // public methods\r\n    self.destroy = function (clean) {\r\n      off('scroll', self.scroll_elem, scrollEv)\r\n      off('resize', window, resizeEv)\r\n      self.html((clean ? self.generateEmptyRow() : rows).join(''))\r\n    }\r\n    self.refresh = function (force) {\r\n      if (self.getRowsHeight(rows) || force) self.update(rows)\r\n    }\r\n    self.update = function (new_rows) {\r\n      rows = isArray(new_rows)\r\n        ? new_rows\r\n        : []\r\n      var scroll_top = self.scroll_elem.scrollTop\r\n      // fixes #39\r\n      if (rows.length * self.options.item_height < scroll_top) {\r\n        self.scroll_elem.scrollTop = 0\r\n        last_cluster = 0\r\n      }\r\n      self.insertToDOM(rows, cache)\r\n      self.scroll_elem.scrollTop = scroll_top\r\n    }\r\n    self.clear = function () {\r\n      self.update([])\r\n    }\r\n    self.getRowsAmount = function () {\r\n      return rows.length\r\n    }\r\n    self.getScrollProgress = function () {\r\n      return this.options.scroll_top / (rows.length * this.options.item_height) * 100 || 0\r\n    }\r\n\r\n    var add = function (where, _new_rows) {\r\n      var new_rows = isArray(_new_rows)\r\n        ? _new_rows\r\n        : []\r\n      if (!new_rows.length) return\r\n      rows = where == 'append'\r\n        ? rows.concat(new_rows)\r\n        : new_rows.concat(rows)\r\n      self.insertToDOM(rows, cache)\r\n    }\r\n    self.append = function (rows) {\r\n      add('append', rows)\r\n    }\r\n    self.prepend = function (rows) {\r\n      add('prepend', rows)\r\n    }\r\n  }\r\n\r\n  Clusterize.prototype = {\r\n    constructor: Clusterize,\r\n    // fetch existing markup\r\n    fetchMarkup: function () {\r\n      var rows = [], rows_nodes = this.getChildNodes(this.content_elem)\r\n      while (rows_nodes.length) {\r\n        rows.push(rows_nodes.shift().outerHTML)\r\n      }\r\n      return rows\r\n    },\r\n    // get tag name, content tag name, tag height, calc cluster height\r\n    exploreEnvironment: function (rows, cache) {\r\n      var opts = this.options\r\n      opts.content_tag = this.content_elem.tagName.toLowerCase()\r\n      if (!rows.length) return\r\n      if (ie && ie <= 9 && !opts.tag) opts.tag = rows[0].match(/<([^>\\s/]*)/)[1].toLowerCase()\r\n      if (this.content_elem.children.length <= 1) cache.data = this.html(rows[0] + rows[0] + rows[0])\r\n      if (!opts.tag) opts.tag = this.content_elem.children[0].tagName.toLowerCase()\r\n      this.getRowsHeight(rows)\r\n    },\r\n    getRowsHeight: function (rows) {\r\n      var opts = this.options,\r\n        prev_item_height = opts.item_height\r\n      opts.cluster_height = 0\r\n      if (!rows.length) return\r\n      var nodes = this.content_elem.children\r\n      var node = nodes[Math.floor(nodes.length / 2)]\r\n      opts.item_height = node.offsetHeight\r\n      // consider table's border-spacing\r\n      if (opts.tag == 'tr' && getStyle('borderCollapse', this.content_elem) != 'collapse') { opts.item_height += parseInt(getStyle('borderSpacing', this.content_elem), 10) || 0 }\r\n      // consider margins (and margins collapsing)\r\n      if (opts.tag != 'tr') {\r\n        var marginTop = parseInt(getStyle('marginTop', node), 10) || 0\r\n        var marginBottom = parseInt(getStyle('marginBottom', node), 10) || 0\r\n        opts.item_height += Math.max(marginTop, marginBottom)\r\n      }\r\n      opts.block_height = opts.item_height * opts.rows_in_block\r\n      opts.rows_in_cluster = opts.blocks_in_cluster * opts.rows_in_block\r\n      opts.cluster_height = opts.blocks_in_cluster * opts.block_height\r\n      return prev_item_height != opts.item_height\r\n    },\r\n    // get current cluster number\r\n    getClusterNum: function () {\r\n      this.options.scroll_top = this.scroll_elem.scrollTop\r\n      return Math.floor(this.options.scroll_top / (this.options.cluster_height - this.options.block_height)) || 0\r\n    },\r\n    // generate empty row if no data provided\r\n    generateEmptyRow: function () {\r\n      var opts = this.options\r\n      if (!opts.tag || !opts.show_no_data_row) return []\r\n      var empty_row = document.createElement(opts.tag),\r\n        no_data_content = document.createTextNode(opts.no_data_text), td\r\n      empty_row.className = opts.no_data_class\r\n      if (opts.tag == 'tr') {\r\n        td = document.createElement('td')\r\n        // fixes #53\r\n        td.colSpan = 100\r\n        td.appendChild(no_data_content)\r\n      }\r\n      empty_row.appendChild(td || no_data_content)\r\n      return [empty_row.outerHTML]\r\n    },\r\n    // generate cluster for current scroll position\r\n    generate: function (rows, cluster_num) {\r\n      var opts = this.options,\r\n        rows_len = rows.length\r\n      if (rows_len < opts.rows_in_block) {\r\n        return {\r\n          top_offset: 0,\r\n          bottom_offset: 0,\r\n          rows_above: 0,\r\n          rows: rows_len ? rows : this.generateEmptyRow()\r\n        }\r\n      }\r\n      var items_start = Math.max((opts.rows_in_cluster - opts.rows_in_block) * cluster_num, 0),\r\n        items_end = items_start + opts.rows_in_cluster,\r\n        top_offset = Math.max(items_start * opts.item_height, 0),\r\n        bottom_offset = Math.max((rows_len - items_end) * opts.item_height, 0),\r\n        this_cluster_rows = [],\r\n        rows_above = items_start\r\n      if (top_offset < 1) {\r\n        rows_above++\r\n      }\r\n      for (var i = items_start; i < items_end; i++) {\r\n        rows[i] && this_cluster_rows.push(rows[i])\r\n      }\r\n      return {\r\n        top_offset: top_offset,\r\n        bottom_offset: bottom_offset,\r\n        rows_above: rows_above,\r\n        rows: this_cluster_rows\r\n      }\r\n    },\r\n    renderExtraTag: function (class_name, height) {\r\n      var tag = document.createElement(this.options.tag),\r\n        clusterize_prefix = 'clusterize-'\r\n      tag.className = [clusterize_prefix + 'extra-row', clusterize_prefix + class_name].join(' ')\r\n      height && (tag.style.height = height + 'px')\r\n      return tag.outerHTML\r\n    },\r\n    // if necessary verify data changed and insert to DOM\r\n    insertToDOM: function (rows, cache) {\r\n      // explore row's height\r\n      if (!this.options.cluster_height) {\r\n        this.exploreEnvironment(rows, cache)\r\n      }\r\n      var data = this.generate(rows, this.getClusterNum()),\r\n        this_cluster_rows = data.rows.join(''),\r\n        this_cluster_content_changed = this.checkChanges('data', this_cluster_rows, cache),\r\n        top_offset_changed = this.checkChanges('top', data.top_offset, cache),\r\n        only_bottom_offset_changed = this.checkChanges('bottom', data.bottom_offset, cache),\r\n        callbacks = this.options.callbacks,\r\n        layout = []\r\n\r\n      if (this_cluster_content_changed || top_offset_changed) {\r\n        if (data.top_offset) {\r\n          this.options.keep_parity && layout.push(this.renderExtraTag('keep-parity'))\r\n          layout.push(this.renderExtraTag('top-space', data.top_offset))\r\n        }\r\n        layout.push(this_cluster_rows)\r\n        data.bottom_offset && layout.push(this.renderExtraTag('bottom-space', data.bottom_offset))\r\n        callbacks.clusterWillChange && callbacks.clusterWillChange()\r\n        this.html(layout.join(''))\r\n        this.options.content_tag == 'ol' && this.content_elem.setAttribute('start', data.rows_above)\r\n        callbacks.clusterChanged && callbacks.clusterChanged()\r\n      } else if (only_bottom_offset_changed) {\r\n        this.content_elem.lastChild.style.height = data.bottom_offset + 'px'\r\n      }\r\n    },\r\n    // unfortunately ie <= 9 does not allow to use innerHTML for table elements, so make a workaround\r\n    html: function (data) {\r\n      var content_elem = this.content_elem\r\n      if (ie && ie <= 9 && this.options.tag == 'tr') {\r\n        var div = document.createElement('div'), last\r\n        div.innerHTML = '<table><tbody>' + data + '</tbody></table>'\r\n        while ((last = content_elem.lastChild)) {\r\n          content_elem.removeChild(last)\r\n        }\r\n        var rows_nodes = this.getChildNodes(div.firstChild.firstChild)\r\n        while (rows_nodes.length) {\r\n          content_elem.appendChild(rows_nodes.shift())\r\n        }\r\n      } else {\r\n        content_elem.innerHTML = data\r\n      }\r\n    },\r\n    getChildNodes: function (tag) {\r\n      var child_nodes = tag.children, nodes = []\r\n      for (var i = 0, ii = child_nodes.length; i < ii; i++) {\r\n        nodes.push(child_nodes[i])\r\n      }\r\n      return nodes\r\n    },\r\n    checkChanges: function (type, value, cache) {\r\n      var changed = value != cache[type]\r\n      cache[type] = value\r\n      return changed\r\n    }\r\n  }\r\n\r\n  // support functions\r\n  function on (evt, element, fnc) {\r\n    return element.addEventListener ? element.addEventListener(evt, fnc, false) : element.attachEvent('on' + evt, fnc)\r\n  }\r\n  function off (evt, element, fnc) {\r\n    return element.removeEventListener ? element.removeEventListener(evt, fnc, false) : element.detachEvent('on' + evt, fnc)\r\n  }\r\n  function isArray (arr) {\r\n    return Object.prototype.toString.call(arr) === '[object Array]'\r\n  }\r\n  function getStyle (prop, elem) {\r\n    return window.getComputedStyle ? window.getComputedStyle(elem)[prop] : elem.currentStyle[prop]\r\n  }\r\n\r\n  return Clusterize\r\n}))\r\n","const Constants = require('./constants.js')\r\nconst Picker = require('./picker.js')\r\nconst Observer = require('./observer.js').ChildAddRemoveObserver\r\n\r\nconst initEmojis = require('./initializer.js')\r\n\r\nfunction attachPickerObserver () {\r\n  if (window.better_emojis.pickerObserver) {\r\n    window.better_emojis.pickerObserver.disconnect()\r\n  } else {\r\n    window.better_emojis.pickerObserver = new Observer(null,\r\n      () => {\r\n        if ($(Constants.EMOJI_PICKER_PATH).find('.emoji-picker').length &&\r\n                      ($('.channel-textarea-emoji').hasClass('popout-open') || $('.btn-reaction.popout-open').length)) {\r\n          Picker.show()\r\n        }\r\n      },\r\n      () => {\r\n        if (window.better_emojis.current_cluster) {\r\n          window.better_emojis.current_cluster.destroy()\r\n        }\r\n      }\r\n    )\r\n  }\r\n  window.better_emojis.pickerObserver.reattach = attachPickerObserver\r\n  window.better_emojis.pickerObserver.observe($(Constants.EMOJI_PICKER_PATH)[0])\r\n}\r\n\r\ninitEmojis().then((spanCache) => {\r\n  Picker.setCommonEmojiSpanCache(spanCache.spanCache)\r\n  setTimeout(() => {\r\n    attachPickerObserver()\r\n    console.log('Better Emojis initialized')\r\n  }, 2000)\r\n})\r\n","const observer = Symbol('observer')\r\nconst addListeners = Symbol('addListeners')\r\nconst removeListeners = Symbol('removeListeners')\r\n\r\nclass ChildAddRemoveObserver {\r\n  constructor (target = null, addListener = null, removeListener = null) {\r\n    this[observer] = new MutationObserver(([mutation]) => {\r\n      if (mutation.type === 'childList') {\r\n        if (mutation.addedNodes.length > 0) {\r\n          for (const listener of this[addListeners]) {\r\n            if (typeof listener === 'function') {\r\n              listener(mutation)\r\n            }\r\n          }\r\n        }\r\n\r\n        if (mutation.removedNodes.length > 0) {\r\n          for (const listener of this[removeListeners]) {\r\n            if (typeof listener === 'function') {\r\n              listener(mutation)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    this[addListeners] = []\r\n    this[removeListeners] = []\r\n\r\n    if (target) {\r\n      this.observe(target)\r\n    }\r\n\r\n    this.add(addListener).remove(removeListener)\r\n  }\r\n\r\n  observe (target) {\r\n    if (!target || !(target instanceof Node)) {\r\n      throw new TypeError('Target must be Node!')\r\n    }\r\n\r\n    this[observer].observe(target, { childList: true })\r\n\r\n    return this\r\n  }\r\n\r\n  add (listener) {\r\n    return this.on('add', listener)\r\n  }\r\n\r\n  remove (listener) {\r\n    return this.on('remove', listener)\r\n  }\r\n\r\n  on (evt, listener) {\r\n    if (typeof listener === 'function') {\r\n      switch (evt) {\r\n        case 'add':\r\n          this[addListeners].push(listener)\r\n          break\r\n        case 'remove':\r\n          this[removeListeners].push(listener)\r\n          break\r\n      }\r\n    }\r\n    return this\r\n  }\r\n\r\n  off (evt) {\r\n    switch (evt) {\r\n      case 'add':\r\n        this[addListeners].length = 0\r\n        break\r\n      case 'remove':\r\n        this[removeListeners].length = 0\r\n        break\r\n    }\r\n    return this\r\n  }\r\n\r\n  disconnect () {\r\n    this[observer].disconnect()\r\n    return this\r\n  }\r\n}\r\n\r\nmodule.exports.ChildAddRemoveObserver = ChildAddRemoveObserver\r\n","const Constants = require('./constants.js')\r\nconst Clusterize = require('./lib/clusterize.js')\r\nconst Emoji = require('./emoji.js')\r\nconst Server = require('./server.js')\r\n\r\nlet commonEmojisSpansCache = ''\r\n\r\nlet SCROLLER_WRAP = null\r\nlet SCROLLER_WRAP_OLD = null\r\nlet SEARCH_INPUT = null\r\n\r\nfunction buildScrollerWrap () {\r\n  const s = SCROLLER_WRAP || $(Constants.ELEMENT_SCROLLER_WRAP)\r\n  const scr = s.find('.scroller')\r\n\r\n  scr.html(' ').off('click').off('mouseenter').off('mouseleave')\r\n\r\n  const c = Server.getCurrentServer()\r\n  // Append all current server emojis, if any\r\n  if (c.emojis.length > 0) { scr.append(buildServerSpan(c)) }\r\n\r\n  // Append all other server shared emojis\r\n  if (c.canUseExternalEmojis) {\r\n    for (const server of Server.getAllServers()) {\r\n      if (!server.isCurrent() && server.sharedEmojis.length > 0 && Constants.IS_NUMBER_REGEX.test(server.id)) {\r\n        scr.append(buildServerSpan(server))\r\n      }\r\n    }\r\n  }\r\n\r\n  // Append common emojis\r\n  if (commonEmojisSpansCache) {\r\n    scr.append(commonEmojisSpansCache)\r\n  }\r\n\r\n  window.better_emojis.current_cluster = new Clusterize({\r\n    rows_in_block: 10,\r\n    blocks_in_cluster: 3,\r\n    scrollElem: scr[0],\r\n    contentElem: scr[0]\r\n  })\r\n\r\n  const emojiClickHandler = $('.channel-textarea-emoji').hasClass('popout-open') ? putEmojiInTextarea : addCurrentMessageReaction\r\n\r\n  scr\r\n    .on('click', '.emoji-item', e => { console.log('Selected emoji - ', Emoji.getById($(e.target).attr('data-emoji'))) })\r\n    .on('click', '.emoji-item', e => { emojiClickHandler(Emoji.getById($(e.target).attr('data-emoji'))) })\r\n    .on('mouseenter', '.emoji-item', e => {\r\n      $(e.target).addClass('selected')\r\n      if (SEARCH_INPUT) {\r\n        SEARCH_INPUT.attr('placeholder', Emoji.getById($(e.target).attr('data-emoji')).useName)\r\n      }\r\n    })\r\n    .on('mouseleave', '.emoji-item', e => {\r\n      $(e.target).removeClass('selected')\r\n      if (SEARCH_INPUT) {\r\n        SEARCH_INPUT.attr('placeholder', 'Find the perfect emoji')\r\n      }\r\n    })\r\n\r\n  return s\r\n}\r\n\r\nfunction buildServerSpan (server) {\r\n  const s = $(Constants.ELEMENT_SERVER_EMOJI_LIST)\r\n  s.find('.category').html(server.name)\r\n\r\n  s.append(buildEmojisRows(server.availableEmojis()))\r\n\r\n  return s.html()\r\n}\r\n\r\nfunction buildEmojisRows (eL) {\r\n  const s = $('<span class=\"tl-emoji-list\"></span>')\r\n  let r = $(Constants.ELEMENT_SERVER_EMOJI_LIST_ROW)\r\n\r\n  const emojiElement = function (emoji) {\r\n    return $(Constants.ELEMENT_SERVER_EMOJI_LIST_ROW_ENTRY)\r\n            .css('background-image', `url(\"${emoji.url}\")`)\r\n            .attr('data-emoji', `${emoji.id}`)\r\n  }\r\n\r\n  for (let i = 0; i < eL.length; i++) {\r\n    if ((i !== 0) && (i % 10 === 0)) {\r\n      s.append(r)\r\n      r = $(Constants.ELEMENT_SERVER_EMOJI_LIST_ROW)\r\n    }\r\n    r.append(emojiElement(eL[i]))\r\n  }\r\n  s.append(r)\r\n\r\n  return s.html()\r\n}\r\n\r\nfunction putEmojiInTextarea (emoji) {\r\n  const textarea = $('.channel-textarea >> textarea')\r\n  textarea.val(`${textarea.val() + emoji.useName} `)\r\n}\r\n\r\nfunction findReact (dom) {\r\n  for (const key in dom) {\r\n    if (key.startsWith('__reactInternalInstance$')) {\r\n      return dom[key]\r\n    }\r\n  }\r\n  return null\r\n};\r\n\r\nfunction getSelectedMessageId () {\r\n  try {\r\n    return Constants.REACTION_POPOUT_REGEX.exec(\r\n            findReact($('.btn-reaction.popout-open').closest('.message').find('.message-text').get(0))\r\n            ._currentElement.props.children\r\n            .filter(c => {\r\n              return Object.keys(c.props).includes('subscribeTo')\r\n            })[0].props.subscribeTo)[1]\r\n  } catch (e) {\r\n    return null\r\n  }\r\n}\r\n\r\nfunction getCurrentSelectedChannel () {\r\n  return Constants.CURRENT_SELECTED_CHANNEL_REGEX.exec(window.location.pathname)[1]\r\n}\r\n\r\nfunction addCurrentMessageReaction (emoji) {\r\n  return addMessageReaction(getCurrentSelectedChannel(), getSelectedMessageId(), emoji)\r\n}\r\n\r\nfunction addMessageReaction (channel, message, emoji) {\r\n  $.ajax(`${Constants.API_BASE}/channels/${channel}/messages/${message}/reactions/:${emoji.name}:${emoji.id}/@me`, { method: 'PUT' })\r\n}\r\n\r\nfunction showOriginalScroller () {\r\n  SCROLLER_WRAP.hide().parent()\r\n  SCROLLER_WRAP_OLD.show()\r\n}\r\n\r\nfunction showCustomScroller () {\r\n  SCROLLER_WRAP.show()\r\n  SCROLLER_WRAP_OLD.hide()\r\n  SCROLLER_WRAP.find('.scroller').scrollTop(0)\r\n}\r\n\r\nfunction replaceScroller () {\r\n  SCROLLER_WRAP = buildScrollerWrap()\r\n  SCROLLER_WRAP_OLD = $(Constants.EMOJI_PICKER_PATH).find('.scroller-wrap')\r\n  SCROLLER_WRAP_OLD.hide().before(SCROLLER_WRAP)\r\n}\r\n\r\nfunction replaceSearchInput () {\r\n  // SEARCH_INPUT = buildSearchInput();\r\n  // $(EMOJI_PICKER_PATH).find(\"input\").hide().before(SEARCH_INPUT);\r\n  // Temporary disabled, as original search have much better performance\r\n  let picker = $(Constants.EMOJI_PICKER_PATH)\r\n  SEARCH_INPUT = $(Constants.EMOJI_PICKER_PATH).find('input')\r\n  SEARCH_INPUT.on('change keydown keyup paste', () => {\r\n    let r = picker.find('.scroller-wrap, .no-search-results')\r\n    if (SEARCH_INPUT.val()) {\r\n      r.filter('.tl-emoji-scroller-wrap').hide()\r\n      r.not('.tl-emoji-scroller-wrap').show()\r\n    } else {\r\n      r.filter('.tl-emoji-scroller-wrap').show()\r\n      r.not('.tl-emoji-scroller-wrap').hide()\r\n    }\r\n  })\r\n}\r\n\r\nfunction addCustomScrollerParts () {\r\n    // console.log(\"picker opened\");\r\n  setTimeout(replaceScroller, 20)\r\n  setTimeout(replaceSearchInput, 20)\r\n  setTimeout(() => {\r\n    const categories = $(Constants.EMOJI_PICKER_PATH).find('.categories')\r\n    const categoriesChildren = categories.children()\r\n    const customScroller = ['recent', 'custom']\r\n\r\n    categories.on('click', '.item', function (event) {\r\n      const $this = $(this)\r\n\r\n      categoriesChildren.removeClass('selected')\r\n      $this.addClass('selected')\r\n\r\n      customScroller.forEach(function (category) {\r\n        if ($this.hasClass(category)) {\r\n          showCustomScroller.call(this, event)\r\n        }\r\n      })\r\n\r\n      showOriginalScroller.call(this, event)\r\n    })\r\n  }, 20)\r\n  setTimeout(showCustomScroller, 30)\r\n}\r\n\r\nmodule.exports.buildServerSpan = buildServerSpan\r\nmodule.exports.show = addCustomScrollerParts\r\n\r\nmodule.exports.setCommonEmojiSpanCache = function (cache) {\r\n  commonEmojisSpansCache = cache\r\n}\r\n","const Emoji = require('./emoji.js')\r\n\r\nconst GLOBAL_SERVER_LIST = []\r\n\r\nconst id = Symbol('id')\r\nconst name = Symbol('name')\r\nconst emojis = Symbol('emojis')\r\nconst sharedEmojis = Symbol('sharedEmojis')\r\nconst permissions = Symbol('permissions')\r\nconst serverRegex = Symbol('serverRegex')\r\n\r\nclass Server {\r\n  constructor (_id, _name, _permissions, _emojis = [], _sharedEmojis = []) {\r\n    if (GLOBAL_SERVER_LIST.some(s => s.id === _id)) {\r\n      throw new Error('Cannot have multiple servers with same id!')\r\n    }\r\n\r\n    this[id] = _id\r\n    this[name] = _name\r\n    this[permissions] = _permissions\r\n    this[emojis] = _emojis\r\n    this[sharedEmojis] = _sharedEmojis\r\n    this[serverRegex] = new RegExp(`.*/${_id.toString()}/\\\\d+`)\r\n\r\n    GLOBAL_SERVER_LIST.push(this)\r\n  }\r\n\r\n  addEmoji (emoji) {\r\n    if (!(emoji instanceof Emoji)) {\r\n      throw new TypeError('Only objects of class Emoji can be added using this method')\r\n    }\r\n\r\n    if (this[emojis].some(e => e.id === emoji.id)) {\r\n      return\r\n    }\r\n\r\n    this[emojis].push(emoji)\r\n\r\n    if (emoji.isManaged) {\r\n      this[sharedEmojis].push(emoji)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  get canUseExternalEmojis () {\r\n    return this[permissions] & 0x00040000\r\n  }\r\n\r\n  get id () {\r\n    return this[id]\r\n  }\r\n\r\n  get name () {\r\n    return this[name]\r\n  }\r\n\r\n  get permissions () {\r\n    return this[permissions]\r\n  }\r\n\r\n  get emojis () {\r\n    return this[emojis]\r\n  }\r\n\r\n  get sharedEmojis () {\r\n    return this[sharedEmojis]\r\n  }\r\n\r\n  isCurrent () {\r\n    return this[serverRegex].test(window.location)\r\n  }\r\n\r\n  availableEmojis () {\r\n    return this.isCurrent() ? this.emojis : this.sharedEmojis\r\n  }\r\n\r\n  possibleEmojis () {\r\n    const list = this.emojis\r\n\r\n    for (const server of GLOBAL_SERVER_LIST) {\r\n      if (server.id === this.id) {\r\n        continue\r\n      }\r\n\r\n      list.push(...server.sharedEmojis)\r\n    }\r\n\r\n    return list\r\n  }\r\n\r\n  static getCurrentServer () {\r\n    return GLOBAL_SERVER_LIST.reduce((p, c) => (p || (c.isCurrent() && c)), false) || null\r\n  }\r\n\r\n  static getAllServers () {\r\n    return GLOBAL_SERVER_LIST\r\n  }\r\n\r\n  static getById (id) {\r\n    return GLOBAL_SERVER_LIST.reduce((p, c) => (p || ((c.id === id) && c)), false) || null\r\n  }\r\n}\r\n\r\n// Store \"inbox\" emulation of server\r\nnew Server('@me', '@me', 0x00040000) // eslint-disable-line no-new\r\n\r\nmodule.exports = Server\r\n"]}