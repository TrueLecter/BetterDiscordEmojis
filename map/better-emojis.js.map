{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/constants.js",
    "src/emoji.js",
    "src/helpers.js",
    "src/initializer.js",
    "src/lib/clusterize.js",
    "src/main.js",
    "src/observer.js",
    "src/picker.js",
    "src/server.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChln
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "'use strict';\r\n\r\nexports.API_BASE = 'https://discordapp.com/api';\r\n\r\n/* May be changed with discord updates */\r\nexports.EMOJI_PICKER_PATH = '#app-mount > div > div:nth-child(7)';\r\nexports.EMOJI_BUTTON_CLASS = n(2116).emojiButton;\r\nexports.CHANNEL_TEXTAREA_CLASS = n(2116).channelTextArea;\r\nexports.LOCAL_STORAGE_MODULE = n(1595);\r\nexports.EMOJI_STORAGE_MODULE = n(169).default;\r\nexports.TRANSLATION_MODULE = n(3);\r\nexports.TOKEN_KEY = n(0).TOKEN_KEY;\r\n/* May be changed with discord updates.END */\r\n\r\nexports.ELEMENT_SCROLLER_WRAP = '<div class=\"scroller-wrap tl-emoji-scroller-wrap\"><div class=\"scroller\"></div></div>';\r\n\r\nexports.ELEMENT_SEARCH_INPUT = '<input type=\"text\" placeholder=\"Find the perfect emoji\" value=\"\">';\r\n\r\nexports.ELEMENT_SERVER_EMOJI_LIST = '<span class=\"server-emojis\"><div class=\"category\">server.name</div></span>';\r\nexports.ELEMENT_SERVER_EMOJI_LIST_ROW = '<div class=\"row\"></div>';\r\nexports.ELEMENT_SERVER_EMOJI_LIST_ROW_ENTRY = '<div class=\"emoji-item\"></div>'; // max 10 per row\r\n\r\nexports.REACTION_POPOUT_REGEX = /TOGGLE_REACTION_POPOUT_(\\d+)/;\r\nexports.CURRENT_SELECTED_CHANNEL_REGEX = /.*\\/.+\\/(\\d+)/;\r\nexports.IS_INBOX_REGEX = /\\/channels\\/@me\\/\\d+/;\r\n\r\nexports.IS_NUMBER_REGEX = /\\d+/;\r\n\r\n/**\r\n * Default options HTTP Fetch jQuery\r\n *\r\n * @type {Object}\r\n */\r\nexports.defaultFetchOptions = {\r\n\tmethod: 'GET'\r\n};\r\n\r\nfunction n(id) {\r\n\treturn webpackJsonp([], [], [id]);\r\n}\r\n",
    "'use strict';\r\n\r\nconst id = Symbol('id');\r\nconst name = Symbol('name');\r\nconst url = Symbol('url');\r\nconst managed = Symbol('managed');\r\nconst requireColons = Symbol('requireColons');\r\nconst roles = Symbol('roles');\r\n\r\nconst GLOBAL_EMOJI_MAP = new Map;\r\n\r\nclass Emoji {\r\n\tconstructor(\r\n\t\t_id,\r\n\t\t_name,\r\n\t\t_managed = false,\r\n\t\t_requireColons = true,\r\n\t\t_roles = [],\r\n\t\t_url = `https://cdn.discordapp.com/emojis/${_id}.png`\r\n\t) {\r\n\t\tthis[id] = _id;\r\n\t\tthis[name] = _name;\r\n\t\tthis[url] = _url;\r\n\t\tthis[managed] = _managed;\r\n\t\tthis[requireColons] = _requireColons;\r\n\t\tthis[roles] = _roles;\r\n\r\n\t\tGLOBAL_EMOJI_MAP.set(this[id], this);\r\n\t}\r\n\r\n\tget id() {\r\n\t\treturn this[id];\r\n\t}\r\n\r\n\tget name() {\r\n\t\treturn this[name];\r\n\t}\r\n\r\n\tget url() {\r\n\t\treturn this[url];\r\n\t}\r\n\r\n\tget isManaged() {\r\n\t\treturn this[managed];\r\n\t}\r\n\r\n\tget colonsRequired() {\r\n\t\treturn this[requireColons];\r\n\t}\r\n\r\n\tget roles() {\r\n\t\treturn this[roles];\r\n\t}\r\n\r\n\tget useName() {\r\n\t\treturn this.colonsRequired ? `:${this.name}:` : this.name;\r\n\t}\r\n\r\n\tstatic fromRaw(emojiRaw) {\r\n\t\treturn new Emoji(\r\n\t\t\temojiRaw.id,\r\n\t\t\temojiRaw.name,\r\n\t\t\temojiRaw.managed,\r\n\t\t\temojiRaw.requireColons,\r\n\t\t\temojiRaw.roles\r\n\t\t);\r\n\t}\r\n\r\n\tstatic getById(id) {\r\n\t\treturn GLOBAL_EMOJI_MAP.get(id);\r\n\t}\r\n}\r\n\r\nmodule.exports = Emoji;\r\n",
    "'use strict';\r\n\r\nconst { defaultFetchOptions } = require('./constants');\r\n\r\n/**\r\n * Fetch URL\r\n *\r\n * @param {Object} options\r\n *\r\n * @return {Promise<mixed>}\r\n */\r\nexports.fetchURL = function fetchURL(options) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\toptions = Object.assign({}, defaultFetchOptions, options);\r\n\r\n\t\t$.ajax(options).then(resolve).fail(reject);\r\n\t});\r\n};\r\n",
    "'use strict';\r\n\r\nconst Server = require('./server.js');\r\nconst Emoji = require('./emoji.js');\r\nconst Picker = require('./picker.js');\r\nconst { fetchURL } = require('./helpers.js');\r\nconst {\r\n\tAPI_BASE,\r\n\tTOKEN_KEY,\r\n\tTRANSLATION_MODULE,\r\n\tEMOJI_STORAGE_MODULE,\r\n\tLOCAL_STORAGE_MODULE\r\n} = require('./constants.js');\r\n\r\nlet MY_ID = '';\r\n\r\nfunction getServers() {\r\n\treturn fetchURL({\r\n\t\turl: `${API_BASE}/users/@me/guilds`,\r\n\t\tdataType: 'json'\r\n\t});\r\n}\r\n\r\nfunction getMyId() {\r\n\treturn fetchURL({\r\n\t\turl: `${API_BASE}/users/@me`,\r\n\t\tdataType: 'json'\r\n\t})\r\n\t.then((response) => {\r\n\t\tMY_ID = response.id;\r\n\r\n\t\treturn response;\r\n\t});\r\n}\r\n\r\nfunction parseServer({ id: serverId, permissions: serverPermissions }) {\r\n\treturn fetchURL({\r\n\t\turl: `${API_BASE}/guilds/${serverId}/members/${MY_ID}`,\r\n\t\tdataType: 'json'\r\n\t})\r\n\t.then(({ roles }) => (\r\n\t\tfetchURL({\r\n\t\t\turl: `${API_BASE}/guilds/${serverId}`,\r\n\t\t\tdataType: 'json'\r\n\t\t})\r\n\t\t.then(({ id, name, emojis }) => ({\r\n\t\t\tid,\r\n\t\t\tname,\r\n\t\t\troles,\r\n\t\t\temojis\r\n\t\t}))\r\n\t))\r\n\t.then(({ id, name, emojis, roles }) => {\r\n\t\t// now we got detailed info about server. fill emoji and managed emojis.\r\n\t\t// also set name\r\n\t\tconst server = new Server(id, name, serverPermissions);\r\n\r\n\t\tfor (const emoji of emojis.map(Emoji.fromRaw)) {\r\n\t\t\tconst emojiRoles = emoji.roles;\r\n\r\n\t\t\tif (!emojiRoles.length) {\r\n\t\t\t\tserver.addEmoji(emoji);\r\n\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tfor (const role of emojiRoles) {\r\n\t\t\t\tif (roles.includes(role)) {\r\n\t\t\t\t\tserver.addEmoji(emoji);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn server;\r\n\t});\r\n}\r\n\r\nfunction parseServers(serversA) {\r\n\treturn Promise.all(serversA.map(parseServer));\r\n}\r\n\r\nfunction loadStandartEmojis() {\r\n\tlet commonEmojis = [];\r\n\r\n\tconst translation = TRANSLATION_MODULE.Messages;\r\n\tconst categories = EMOJI_STORAGE_MODULE.getCategories();\r\n\tlet $commonEmojisSpansCacheSpan = $('<span></span>');\r\n\r\n\tfor (let category of categories) {\r\n\t\tconst tr = translation[`EMOJI_CATEGORY_${category.toUpperCase()}`];\r\n\t\tconst fakeServer = new Server(tr, tr, 0x00040000);\r\n\r\n\t\tconst emojis = EMOJI_STORAGE_MODULE.getByCategory(category);\r\n\r\n\t\tfor (let emoji of emojis) {\r\n\t\t\tfakeServer.addEmoji(\r\n\t\t\t\tnew Emoji(\r\n\t\t\t\t\temoji.uniqueName,\r\n\t\t\t\t\temoji.uniqueName,\r\n\t\t\t\t\temoji.managed,\r\n\t\t\t\t\temoji.allNamesString.includes(':'),\r\n\t\t\t\t\t[],\r\n\t\t\t\t\temoji.defaultUrl\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tcommonEmojis.push(fakeServer);\r\n\t\t$commonEmojisSpansCacheSpan.append(Picker.buildServerSpan(fakeServer));\r\n\t}\r\n\r\n\treturn Promise.resolve({\r\n\t\temojis: commonEmojis,\r\n\t\tspanCache: $commonEmojisSpansCacheSpan.html()\r\n\t});\r\n}\r\n\r\nfunction doGetEmojis() {\r\n\tconst token = LOCAL_STORAGE_MODULE.impl.get(TOKEN_KEY);\r\n\r\n\t$.ajaxSetup({\r\n\t\tcrossDomain: true,\r\n\t\theaders: {\r\n\t\t\tauthorization: token\r\n\t\t}\r\n\t});\r\n\r\n\treturn getMyId()\r\n\t\t.then(getServers)\r\n\t\t.then(parseServers)\r\n\t\t.then(loadStandartEmojis)\r\n\t\t.catch(e => {\r\n\t\t\tconsole.error('Error initializing Better Emojis!\\nProbably modules order has been changed\\n', e);\r\n\t\t});\r\n}\r\n\r\nmodule.exports = doGetEmojis;\r\n",
    "/*! Clusterize.js - v0.17.6 - 2017-03-05\r\n * http://NeXTs.github.com/Clusterize.js/\r\n * Copyright (c) 2015 Denis Lukov; Licensed GPLv3 */\r\n\r\n;\r\n(function (name, definition) {\r\n\tif (typeof module !== 'undefined') module.exports = definition();\r\n\telse if (typeof define === 'function' && typeof define.amd === 'object') define(definition);\r\n\telse this[name] = definition();\r\n}('Clusterize', function () {\r\n\r\n\t'use strict'\r\n\r\n\t// detect ie9 and lower\r\n\t// https://gist.github.com/padolsey/527683#comment-786682\r\n\tvar ie = (function () {\r\n\t\t\tfor (var v = 3,\r\n\t\t\t\t\tel = document.createElement('b'),\r\n\t\t\t\t\tall = el.all || []; el.innerHTML = '<!--[if gt IE ' + (++v) + ']><i><![endif]-->',\r\n\t\t\t\tall[0];\r\n\t\t\t) {}\r\n\r\n\t\t\treturn v > 4 ? v : document.documentMode;\r\n\t\t}()),\r\n\r\n\t\tis_mac = navigator.platform.toLowerCase().indexOf('mac') + 1;\r\n\tvar Clusterize = function (data) {\r\n\t\tif (!(this instanceof Clusterize)) {\r\n\t\t\treturn new Clusterize(data);\r\n\t\t}\r\n\r\n\t\tvar self = this;\r\n\r\n\t\tvar defaults = {\r\n\t\t\trows_in_block: 50,\r\n\t\t\tblocks_in_cluster: 4,\r\n\t\t\ttag: null,\r\n\t\t\tshow_no_data_row: true,\r\n\t\t\tno_data_class: 'clusterize-no-data',\r\n\t\t\tno_data_text: 'No data',\r\n\t\t\tkeep_parity: true,\r\n\t\t\tcallbacks: {}\r\n\t\t};\r\n\r\n\t\t// public parameters\r\n\t\tself.options = {};\r\n\t\tvar options = ['rows_in_block', 'blocks_in_cluster', 'show_no_data_row', 'no_data_class', 'no_data_text', 'keep_parity', 'tag', 'callbacks'];\r\n\t\tfor (var i = 0, option; option = options[i]; i++) {\r\n\t\t\tself.options[option] = typeof data[option] !== 'undefined' && data[option] != null ?\r\n\t\t\t\tdata[option] :\r\n\t\t\t\tdefaults[option];\r\n\t\t}\r\n\r\n\t\tvar elems = ['scroll', 'content'];\r\n\t\tfor (var i = 0, elem; elem = elems[i]; i++) {\r\n\t\t\tself[elem + '_elem'] = data[elem + 'Id'] ?\r\n\t\t\t\tdocument.getElementById(data[elem + 'Id']) :\r\n\t\t\t\tdata[elem + 'Elem'];\r\n\t\t\tif (!self[elem + '_elem']) {\r\n\t\t\t\tthrow new Error('Error! Could not find ' + elem + ' element');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// tabindex forces the browser to keep focus on the scrolling list, fixes #11\r\n\t\tif (!self.content_elem.hasAttribute('tabindex')) {\r\n\t\t\tself.content_elem.setAttribute('tabindex', 0);\r\n\t\t}\r\n\r\n\t\t// private parameters\r\n\t\tvar rows = isArray(data.rows) ?\r\n\t\t\tdata.rows :\r\n\t\t\tself.fetchMarkup(),\r\n\t\t\tcache = {},\r\n\t\t\tscroll_top = self.scroll_elem.scrollTop;\r\n\r\n\t\t// append initial data\r\n\t\tself.insertToDOM(rows, cache);\r\n\r\n\t\t// restore the scroll position\r\n\t\tself.scroll_elem.scrollTop = scroll_top;\r\n\r\n\t\t// adding scroll handler\r\n\t\tvar last_cluster = false,\r\n\t\t\tscroll_debounce = 0,\r\n\t\t\tpointer_events_set = false,\r\n\t\t\tscrollEv = function () {\r\n\t\t\t\t// fixes scrolling issue on Mac #3\r\n\t\t\t\tif (is_mac) {\r\n\t\t\t\t\tif (!pointer_events_set) self.content_elem.style.pointerEvents = 'none';\r\n\t\t\t\t\tpointer_events_set = true;\r\n\t\t\t\t\tclearTimeout(scroll_debounce);\r\n\t\t\t\t\tscroll_debounce = setTimeout(function () {\r\n\t\t\t\t\t\tself.content_elem.style.pointerEvents = 'auto';\r\n\t\t\t\t\t\tpointer_events_set = false;\r\n\t\t\t\t\t}, 50);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (last_cluster != (last_cluster = self.getClusterNum())) {\r\n\t\t\t\t\tself.insertToDOM(rows, cache);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (self.options.callbacks.scrollingProgress) {\r\n\t\t\t\t\tself.options.callbacks.scrollingProgress(self.getScrollProgress());\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tresize_debounce = 0,\r\n\t\t\tresizeEv = function () {\r\n\t\t\t\tclearTimeout(resize_debounce);\r\n\t\t\t\tresize_debounce = setTimeout(self.refresh, 100);\r\n\t\t\t};\r\n\r\n\t\ton('scroll', self.scroll_elem, scrollEv);\r\n\t\ton('resize', window, resizeEv);\r\n\r\n\t\t// public methods\r\n\t\tself.destroy = function (clean) {\r\n\t\t\toff('scroll', self.scroll_elem, scrollEv);\r\n\t\t\toff('resize', window, resizeEv);\r\n\t\t\tself.html((clean ? self.generateEmptyRow() : rows).join(''));\r\n\t\t};\r\n\r\n\t\tself.refresh = function (force) {\r\n\t\t\tif (self.getRowsHeight(rows) || force) self.update(rows);\r\n\t\t};\r\n\r\n\t\tself.update = function (new_rows) {\r\n\t\t\trows = isArray(new_rows) ?\r\n\t\t\t\tnew_rows :\r\n\t\t\t\t[]\r\n\t\t\tvar scroll_top = self.scroll_elem.scrollTop\r\n\t\t\t// fixes #39\r\n\t\t\tif (rows.length * self.options.item_height < scroll_top) {\r\n\t\t\t\tself.scroll_elem.scrollTop = 0\r\n\t\t\t\tlast_cluster = 0\r\n\t\t\t}\r\n\t\t\tself.insertToDOM(rows, cache)\r\n\t\t\tself.scroll_elem.scrollTop = scroll_top\r\n\t\t}\r\n\t\tself.clear = function() {\r\n\t\t\tself.update([])\r\n\t\t}\r\n\t\tself.getRowsAmount = function() {\r\n\t\t\treturn rows.length\r\n\t\t}\r\n\t\tself.getScrollProgress = function() {\r\n\t\t\treturn this.options.scroll_top / (rows.length * this.options.item_height) * 100 || 0\r\n\t\t}\r\n\r\n\t\tvar add = function(where, _new_rows) {\r\n\t\t\tvar new_rows = isArray(_new_rows) ?\r\n\t\t\t\t_new_rows :\r\n\t\t\t\t[]\r\n\t\t\tif (!new_rows.length) return\r\n\t\t\trows = where == 'append' ?\r\n\t\t\t\trows.concat(new_rows) :\r\n\t\t\t\tnew_rows.concat(rows)\r\n\t\t\tself.insertToDOM(rows, cache)\r\n\t\t}\r\n\t\tself.append = function(rows) {\r\n\t\t\tadd('append', rows)\r\n\t\t}\r\n\t\tself.prepend = function(rows) {\r\n\t\t\tadd('prepend', rows)\r\n\t\t}\r\n\t}\r\n\r\n\tClusterize.prototype = {\r\n\t\tconstructor: Clusterize,\r\n\t\t// fetch existing markup\r\n\t\tfetchMarkup: function() {\r\n\t\t\tvar rows = [],\r\n\t\t\t\trows_nodes = this.getChildNodes(this.content_elem)\r\n\t\t\twhile (rows_nodes.length) {\r\n\t\t\t\trows.push(rows_nodes.shift().outerHTML)\r\n\t\t\t}\r\n\t\t\treturn rows\r\n\t\t},\r\n\t\t// get tag name, content tag name, tag height, calc cluster height\r\n\t\texploreEnvironment: function(rows, cache) {\r\n\t\t\tvar opts = this.options\r\n\t\t\topts.content_tag = this.content_elem.tagName.toLowerCase()\r\n\t\t\tif (!rows.length) return\r\n\t\t\tif (ie && ie <= 9 && !opts.tag) opts.tag = rows[0].match(/<([^>\\s/]*)/)[1].toLowerCase()\r\n\t\t\tif (this.content_elem.children.length <= 1) cache.data = this.html(rows[0] + rows[0] + rows[0])\r\n\t\t\tif (!opts.tag) opts.tag = this.content_elem.children[0].tagName.toLowerCase()\r\n\t\t\tthis.getRowsHeight(rows)\r\n\t\t},\r\n\t\tgetRowsHeight: function(rows) {\r\n\t\t\tvar opts = this.options,\r\n\t\t\t\tprev_item_height = opts.item_height\r\n\t\t\topts.cluster_height = 0\r\n\t\t\tif (!rows.length) return\r\n\t\t\tvar nodes = this.content_elem.children\r\n\t\t\tvar node = nodes[Math.floor(nodes.length / 2)]\r\n\t\t\topts.item_height = node.offsetHeight\r\n\t\t\t// consider table's border-spacing\r\n\t\t\tif (opts.tag == 'tr' && getStyle('borderCollapse', this.content_elem) != 'collapse') {\r\n\t\t\t\topts.item_height += parseInt(getStyle('borderSpacing', this.content_elem), 10) || 0\r\n\t\t\t}\r\n\t\t\t// consider margins (and margins collapsing)\r\n\t\t\tif (opts.tag != 'tr') {\r\n\t\t\t\tvar marginTop = parseInt(getStyle('marginTop', node), 10) || 0\r\n\t\t\t\tvar marginBottom = parseInt(getStyle('marginBottom', node), 10) || 0\r\n\t\t\t\topts.item_height += Math.max(marginTop, marginBottom)\r\n\t\t\t}\r\n\t\t\topts.block_height = opts.item_height * opts.rows_in_block\r\n\t\t\topts.rows_in_cluster = opts.blocks_in_cluster * opts.rows_in_block\r\n\t\t\topts.cluster_height = opts.blocks_in_cluster * opts.block_height\r\n\t\t\treturn prev_item_height != opts.item_height\r\n\t\t},\r\n\t\t// get current cluster number\r\n\t\tgetClusterNum: function() {\r\n\t\t\tthis.options.scroll_top = this.scroll_elem.scrollTop\r\n\t\t\treturn Math.floor(this.options.scroll_top / (this.options.cluster_height - this.options.block_height)) || 0\r\n\t\t},\r\n\t\t// generate empty row if no data provided\r\n\t\tgenerateEmptyRow: function() {\r\n\t\t\tvar opts = this.options\r\n\t\t\tif (!opts.tag || !opts.show_no_data_row) return []\r\n\t\t\tvar empty_row = document.createElement(opts.tag),\r\n\t\t\t\tno_data_content = document.createTextNode(opts.no_data_text),\r\n\t\t\t\ttd\r\n\t\t\tempty_row.className = opts.no_data_class\r\n\t\t\tif (opts.tag == 'tr') {\r\n\t\t\t\ttd = document.createElement('td')\r\n\t\t\t\t// fixes #53\r\n\t\t\t\ttd.colSpan = 100\r\n\t\t\t\ttd.appendChild(no_data_content)\r\n\t\t\t}\r\n\t\t\tempty_row.appendChild(td || no_data_content)\r\n\t\t\treturn [empty_row.outerHTML]\r\n\t\t},\r\n\t\t// generate cluster for current scroll position\r\n\t\tgenerate: function(rows, cluster_num) {\r\n\t\t\tvar opts = this.options,\r\n\t\t\t\trows_len = rows.length\r\n\t\t\tif (rows_len < opts.rows_in_block) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\ttop_offset: 0,\r\n\t\t\t\t\tbottom_offset: 0,\r\n\t\t\t\t\trows_above: 0,\r\n\t\t\t\t\trows: rows_len ? rows : this.generateEmptyRow()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar items_start = Math.max((opts.rows_in_cluster - opts.rows_in_block) * cluster_num, 0),\r\n\t\t\t\titems_end = items_start + opts.rows_in_cluster,\r\n\t\t\t\ttop_offset = Math.max(items_start * opts.item_height, 0),\r\n\t\t\t\tbottom_offset = Math.max((rows_len - items_end) * opts.item_height, 0),\r\n\t\t\t\tthis_cluster_rows = [],\r\n\t\t\t\trows_above = items_start\r\n\t\t\tif (top_offset < 1) {\r\n\t\t\t\trows_above++\r\n\t\t\t}\r\n\t\t\tfor (var i = items_start; i < items_end; i++) {\r\n\t\t\t\trows[i] && this_cluster_rows.push(rows[i])\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\ttop_offset: top_offset,\r\n\t\t\t\tbottom_offset: bottom_offset,\r\n\t\t\t\trows_above: rows_above,\r\n\t\t\t\trows: this_cluster_rows\r\n\t\t\t}\r\n\t\t},\r\n\t\trenderExtraTag: function(class_name, height) {\r\n\t\t\tvar tag = document.createElement(this.options.tag),\r\n\t\t\t\tclusterize_prefix = 'clusterize-'\r\n\t\t\ttag.className = [clusterize_prefix + 'extra-row', clusterize_prefix + class_name].join(' ')\r\n\t\t\theight && (tag.style.height = height + 'px')\r\n\t\t\treturn tag.outerHTML\r\n\t\t},\r\n\t\t// if necessary verify data changed and insert to DOM\r\n\t\tinsertToDOM: function(rows, cache) {\r\n\t\t\t// explore row's height\r\n\t\t\tif (!this.options.cluster_height) {\r\n\t\t\t\tthis.exploreEnvironment(rows, cache)\r\n\t\t\t}\r\n\t\t\tvar data = this.generate(rows, this.getClusterNum()),\r\n\t\t\t\tthis_cluster_rows = data.rows.join(''),\r\n\t\t\t\tthis_cluster_content_changed = this.checkChanges('data', this_cluster_rows, cache),\r\n\t\t\t\ttop_offset_changed = this.checkChanges('top', data.top_offset, cache),\r\n\t\t\t\tonly_bottom_offset_changed = this.checkChanges('bottom', data.bottom_offset, cache),\r\n\t\t\t\tcallbacks = this.options.callbacks,\r\n\t\t\t\tlayout = []\r\n\r\n\t\t\tif (this_cluster_content_changed || top_offset_changed) {\r\n\t\t\t\tif (data.top_offset) {\r\n\t\t\t\t\tthis.options.keep_parity && layout.push(this.renderExtraTag('keep-parity'))\r\n\t\t\t\t\tlayout.push(this.renderExtraTag('top-space', data.top_offset))\r\n\t\t\t\t}\r\n\t\t\t\tlayout.push(this_cluster_rows)\r\n\t\t\t\tdata.bottom_offset && layout.push(this.renderExtraTag('bottom-space', data.bottom_offset))\r\n\t\t\t\tcallbacks.clusterWillChange && callbacks.clusterWillChange()\r\n\t\t\t\tthis.html(layout.join(''))\r\n\t\t\t\tthis.options.content_tag == 'ol' && this.content_elem.setAttribute('start', data.rows_above)\r\n\t\t\t\tcallbacks.clusterChanged && callbacks.clusterChanged()\r\n\t\t\t} else if (only_bottom_offset_changed) {\r\n\t\t\t\tthis.content_elem.lastChild.style.height = data.bottom_offset + 'px'\r\n\t\t\t}\r\n\t\t},\r\n\t\t// unfortunately ie <= 9 does not allow to use innerHTML for table elements, so make a workaround\r\n\t\thtml: function(data) {\r\n\t\t\tvar content_elem = this.content_elem\r\n\t\t\tif (ie && ie <= 9 && this.options.tag == 'tr') {\r\n\t\t\t\tvar div = document.createElement('div'),\r\n\t\t\t\t\tlast\r\n\t\t\t\tdiv.innerHTML = '<table><tbody>' + data + '</tbody></table>'\r\n\t\t\t\twhile ((last = content_elem.lastChild)) {\r\n\t\t\t\t\tcontent_elem.removeChild(last)\r\n\t\t\t\t}\r\n\t\t\t\tvar rows_nodes = this.getChildNodes(div.firstChild.firstChild)\r\n\t\t\t\twhile (rows_nodes.length) {\r\n\t\t\t\t\tcontent_elem.appendChild(rows_nodes.shift())\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tcontent_elem.innerHTML = data\r\n\t\t\t}\r\n\t\t},\r\n\t\tgetChildNodes: function(tag) {\r\n\t\t\tvar child_nodes = tag.children,\r\n\t\t\t\tnodes = []\r\n\t\t\tfor (var i = 0, ii = child_nodes.length; i < ii; i++) {\r\n\t\t\t\tnodes.push(child_nodes[i])\r\n\t\t\t}\r\n\t\t\treturn nodes\r\n\t\t},\r\n\t\tcheckChanges: function(type, value, cache) {\r\n\t\t\tvar changed = value != cache[type]\r\n\t\t\tcache[type] = value\r\n\t\t\treturn changed\r\n\t\t}\r\n\t}\r\n\r\n\t// support functions\r\n\tfunction on(evt, element, fnc) {\r\n\t\treturn element.addEventListener ? element.addEventListener(evt, fnc, false) : element.attachEvent('on' + evt, fnc)\r\n\t}\r\n\r\n\tfunction off(evt, element, fnc) {\r\n\t\treturn element.removeEventListener ? element.removeEventListener(evt, fnc, false) : element.detachEvent('on' + evt, fnc)\r\n\t}\r\n\r\n\tfunction isArray(arr) {\r\n\t\treturn Object.prototype.toString.call(arr) === '[object Array]'\r\n\t}\r\n\r\n\tfunction getStyle(prop, elem) {\r\n\t\treturn window.getComputedStyle ? window.getComputedStyle(elem)[prop] : elem.currentStyle[prop]\r\n\t}\r\n\r\n\treturn Clusterize\r\n}))\r\n",
    "'use strict';\r\n\r\nconst Picker = require('./picker.js');\r\nconst Observer = require('./observer.js').ChildAddRemoveObserver;\r\nconst {\r\n\tEMOJI_PICKER_PATH,\r\n\tEMOJI_BUTTON_CLASS,\r\n} = require('./constants.js');\r\n\r\nconst initEmojis = require('./initializer.js');\r\n\r\nfunction attachPickerObserver() {\r\n\tif (window.better_emojis.pickerObserver) {\r\n\t\twindow.better_emojis.pickerObserver.disconnect();\r\n\t} else {\r\n\t\twindow.better_emojis.pickerObserver = new Observer(null,\r\n\t\t\t() => {\r\n\t\t\t\tlet isPickerOpened = !!$(EMOJI_PICKER_PATH).find('.emoji-picker').length;\r\n\t\t\t\tlet isInlineOrTextareaPicker =\r\n\t\t\t\t\t$(`.${EMOJI_BUTTON_CLASS}`).hasClass('popout-open') ||\r\n\t\t\t\t\t!!$('.btn-reaction.popout-open').length;\r\n\t\t\t\tif (isPickerOpened && isInlineOrTextareaPicker) {\r\n\t\t\t\t\tPicker.show();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t() => {\r\n\t\t\t\tif (window.better_emojis.current_cluster) {\r\n\t\t\t\t\twindow.better_emojis.current_cluster.destroy();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\twindow.better_emojis.pickerObserver.reattach = attachPickerObserver;\r\n\twindow.better_emojis.pickerObserver.observe($(EMOJI_PICKER_PATH)[0]);\r\n}\r\n\r\ninitEmojis().then((spanCache) => {\r\n\tPicker.setCommonEmojiSpanCache(spanCache.spanCache);\r\n\tsetTimeout(() => {\r\n\t\tattachPickerObserver();\r\n\t\tconsole.log('Better Emojis initialized');\r\n\t}, 2000);\r\n});\r\n",
    "'use strict';\r\n\r\nconst observer = Symbol('observer');\r\nconst addListeners = Symbol('addListeners');\r\nconst removeListeners = Symbol('removeListeners');\r\n\r\nclass ChildAddRemoveObserver {\r\n\tconstructor(target = null, addListener = null, removeListener = null) {\r\n\t\tthis[observer] = new MutationObserver(([mutation]) => {\r\n\t\t\tif (mutation.type !== 'childList') {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (mutation.addedNodes.length > 0) {\r\n\t\t\t\tfor (const listener of this[addListeners]) {\r\n\t\t\t\t\tlistener(mutation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (mutation.removedNodes.length > 0) {\r\n\t\t\t\tfor (const listener of this[removeListeners]) {\r\n\t\t\t\t\tlistener(mutation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis[addListeners] = [];\r\n\t\tthis[removeListeners] = [];\r\n\r\n\t\tif (target) {\r\n\t\t\tthis.observe(target);\r\n\t\t}\r\n\r\n\t\tthis.add(addListener).remove(removeListener);\r\n\t}\r\n\r\n\tobserve(target) {\r\n\t\tif (!target || !(target instanceof Node)) {\r\n\t\t\tthrow new TypeError('Target must be Node!');\r\n\t\t}\r\n\r\n\t\tthis[observer].observe(target, {\r\n\t\t\tchildList: true\r\n\t\t});\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tadd(listener) {\r\n\t\treturn this.on('add', listener);\r\n\t}\r\n\r\n\tremove(listener) {\r\n\t\treturn this.on('remove', listener);\r\n\t}\r\n\r\n\ton(evt, listener) {\r\n\t\tif (typeof listener !== 'function') {\r\n\t\t\tthrow new TypeError('Listener must be function');\r\n\t\t}\r\n\r\n\t\tswitch (evt) {\r\n\t\t\tcase 'add':\r\n\t\t\t\tthis[addListeners].push(listener);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'remove':\r\n\t\t\t\tthis[removeListeners].push(listener);\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\toff(evt) {\r\n\t\tswitch (evt) {\r\n\t\t\tcase 'add':\r\n\t\t\t\tthis[addListeners] = [];\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'remove':\r\n\t\t\t\tthis[removeListeners] = [];\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tdisconnect() {\r\n\t\tthis[observer].disconnect();\r\n\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nmodule.exports.ChildAddRemoveObserver = ChildAddRemoveObserver;\r\n",
    "'use strict';\r\n\r\nconst Clusterize = require('./lib/clusterize.js');\r\nconst Emoji = require('./emoji.js');\r\nconst Server = require('./server.js');\r\n\r\nconst { fetchURL } = require('./helpers');\r\nconst {\r\n\tAPI_BASE,\r\n\tIS_NUMBER_REGEX,\r\n\tEMOJI_PICKER_PATH,\r\n\tELEMENT_SCROLLER_WRAP,\r\n\tREACTION_POPOUT_REGEX,\r\n\tELEMENT_SERVER_EMOJI_LIST,\r\n\tELEMENT_SERVER_EMOJI_LIST_ROW,\r\n\tCURRENT_SELECTED_CHANNEL_REGEX,\r\n\tELEMENT_SERVER_EMOJI_LIST_ROW_ENTRY,\r\n\tEMOJI_BUTTON_CLASS,\r\n\tCHANNEL_TEXTAREA_CLASS\r\n} = require('./constants.js');\r\n\r\nlet commonEmojisSpansCache = '';\r\n\r\nlet SCROLLER_WRAP = null;\r\nlet SCROLLER_WRAP_OLD = null;\r\nlet SEARCH_INPUT = null;\r\n\r\nfunction buildScrollerWrap() {\r\n\tconst $wrap = SCROLLER_WRAP || $(ELEMENT_SCROLLER_WRAP);\r\n\tconst $scr = $wrap.find('.scroller');\r\n\r\n\t$scr.html(' ').off('click').off('mouseenter').off('mouseleave');\r\n\r\n\tconst currentServer = Server.getCurrentServer();\r\n\r\n\t// Append all current server emojis, if any\r\n\tif (currentServer.emojis.length > 0) {\r\n\t\t$scr.append(buildServerSpan(currentServer));\r\n\t}\r\n\r\n\t// Append all other server shared emojis\r\n\tif (currentServer.canUseExternalEmojis) {\r\n\t\tfor (const server of Server.getAllServers()) {\r\n\t\t\tif (!server.isCurrent() && server.sharedEmojis.length > 0 && IS_NUMBER_REGEX.test(server.id)) {\r\n\t\t\t\t$scr.append(buildServerSpan(server));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Append common emojis\r\n\tif (commonEmojisSpansCache) {\r\n\t\t$scr.append(commonEmojisSpansCache);\r\n\t}\r\n\r\n\twindow.better_emojis.current_cluster = new Clusterize({\r\n\t\trows_in_block: 10,\r\n\t\tblocks_in_cluster: 3,\r\n\t\tscrollElem: $scr[0],\r\n\t\tcontentElem: $scr[0]\r\n\t});\r\n\r\n\tconst emojiClickHandler = $(`.${EMOJI_BUTTON_CLASS}`).hasClass('popout-open')\r\n\t\t? putEmojiInTextarea\r\n\t\t: addCurrentMessageReaction;\r\n\r\n\t$scr\r\n\t.on('click', '.emoji-item', e => {\r\n\t\tconsole.log('Selected emoji - ', Emoji.getById($(e.target).attr('data-emoji')));\r\n\t})\r\n\t.on('click', '.emoji-item', e => {\r\n\t\temojiClickHandler(Emoji.getById($(e.target).attr('data-emoji')));\r\n\t})\r\n\t.on('mouseenter', '.emoji-item', e => {\r\n\t\t$(e.target).addClass('selected');\r\n\r\n\t\tif (SEARCH_INPUT) {\r\n\t\t\tSEARCH_INPUT.attr('placeholder', Emoji.getById($(e.target).attr('data-emoji')).useName);\r\n\t\t}\r\n\t})\r\n\t.on('mouseleave', '.emoji-item', e => {\r\n\t\t$(e.target).removeClass('selected');\r\n\r\n\t\tif (SEARCH_INPUT) {\r\n\t\t\tSEARCH_INPUT.attr('placeholder', 'Find the perfect emoji');\r\n\t\t}\r\n\t});\r\n\r\n\treturn $wrap;\r\n}\r\n\r\nfunction buildServerSpan(server) {\r\n\tconst $emojiList = $(ELEMENT_SERVER_EMOJI_LIST);\r\n\r\n\t$emojiList.find('.category').html(server.name);\r\n\t$emojiList.append(buildEmojisRows(server.availableEmojis()));\r\n\r\n\treturn $emojiList.html();\r\n}\r\n\r\nfunction buildEmojisRows(eL) {\r\n\tconst $emojiList = $('<span class=\"tl-emoji-list\"></span>');\r\n\tlet $emojiListRow = $(ELEMENT_SERVER_EMOJI_LIST_ROW);\r\n\r\n\tconst emojiElement = function (emoji) {\r\n\t\treturn $(ELEMENT_SERVER_EMOJI_LIST_ROW_ENTRY)\r\n\t\t\t.css('background-image', `url(\"${emoji.url}\")`)\r\n\t\t\t.attr('data-emoji', `${emoji.id}`);\r\n\t};\r\n\r\n\tfor (let i = 0; i < eL.length; i++) {\r\n\t\tif ((i !== 0) && (i % 10 === 0)) {\r\n\t\t\t$emojiList.append($emojiListRow);\r\n\t\t\t$emojiListRow = $(ELEMENT_SERVER_EMOJI_LIST_ROW);\r\n\t\t}\r\n\r\n\t\t$emojiListRow.append(emojiElement(eL[i]));\r\n\t}\r\n\r\n\t$emojiList.append($emojiListRow);\r\n\r\n\treturn $emojiList.html();\r\n}\r\n\r\nfunction putEmojiInTextarea(emoji) {\r\n\tconst $textarea = $(`.${CHANNEL_TEXTAREA_CLASS} >> textarea`);\r\n\r\n\t$textarea.val($textarea.val() + emoji.useName + ' ');\r\n}\r\n\r\nfunction findReact(dom) {\r\n\tfor (const key in dom) {\r\n\t\tif (key.startsWith('__reactInternalInstance$')) {\r\n\t\t\treturn dom[key];\r\n\t\t}\r\n\t}\r\n\r\n\treturn null;\r\n};\r\n\r\nfunction getSelectedMessageId() {\r\n\ttry {\r\n\t\treturn REACTION_POPOUT_REGEX.exec(\r\n\t\t\tfindReact($('.btn-reaction.popout-open').closest('.message').find('.message-text').get(0))\r\n\t\t\t._currentElement.props.children\r\n\t\t\t.filter(c => (\r\n\t\t\t\tObject.keys(c.props).includes('subscribeTo')\r\n\t\t\t))[0].props.subscribeTo\r\n\t\t)[1];\r\n\t} catch (e) {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nfunction getCurrentSelectedChannel() {\r\n\treturn CURRENT_SELECTED_CHANNEL_REGEX.exec(window.location.pathname)[1];\r\n}\r\n\r\nfunction addCurrentMessageReaction(emoji) {\r\n\treturn addMessageReaction(getCurrentSelectedChannel(), getSelectedMessageId(), emoji);\r\n}\r\n\r\nfunction addMessageReaction(channel, message, emoji) {\r\n\treturn fetchURL({\r\n\t\turl: `${API_BASE}/channels/${channel}/messages/${message}/reactions/:${emoji.name}:${emoji.id}/@me`,\r\n\t\tmethod: 'PUT',\r\n\t\tdataType: 'json',\r\n\t});\r\n}\r\n\r\nfunction showOriginalScroller() {\r\n\tSCROLLER_WRAP.hide().parent();\r\n\tSCROLLER_WRAP_OLD.show();\r\n}\r\n\r\nfunction showCustomScroller() {\r\n\tSCROLLER_WRAP.show();\r\n\tSCROLLER_WRAP_OLD.hide();\r\n\tSCROLLER_WRAP.find('.scroller').scrollTop(0);\r\n}\r\n\r\nfunction replaceScroller() {\r\n\tSCROLLER_WRAP = buildScrollerWrap();\r\n\tSCROLLER_WRAP_OLD = $(EMOJI_PICKER_PATH).find('.scroller-wrap');\r\n\tSCROLLER_WRAP_OLD.hide().before(SCROLLER_WRAP);\r\n}\r\n\r\nfunction replaceSearchInput() {\r\n\t// SEARCH_INPUT = buildSearchInput();\r\n\t// $(EMOJI_PICKER_PATH).find(\"input\").hide().before(SEARCH_INPUT);\r\n\t// Temporary disabled, as original search have much better performance\r\n\tlet $picker = $(EMOJI_PICKER_PATH);\r\n\tSEARCH_INPUT = $picker.find('input');\r\n\r\n\tSEARCH_INPUT.on('change keydown keyup paste', () => {\r\n\t\tlet $wrap = $picker.find('.scroller-wrap, .no-search-results');\r\n\r\n\t\tif (SEARCH_INPUT.val()) {\r\n\t\t\t$wrap.filter('.tl-emoji-scroller-wrap').hide();\r\n\t\t\t$wrap.not('.tl-emoji-scroller-wrap').show();\r\n\t\t} else {\r\n\t\t\t$wrap.filter('.tl-emoji-scroller-wrap').show();\r\n\t\t\t$wrap.not('.tl-emoji-scroller-wrap').hide();\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction addCustomScrollerParts() {\r\n\t// console.log(\"picker opened\");\r\n\r\n\tsetTimeout(() => {\r\n\t\tsetTimeout(showCustomScroller, 10);\r\n\r\n\t\treplaceScroller();\r\n\t\treplaceSearchInput();\r\n\r\n\t\tconst categories = $(EMOJI_PICKER_PATH).find('.categories');\r\n\t\tconst categoriesChildren = categories.children();\r\n\t\tconst customScroller = ['recent', 'custom'];\r\n\r\n\t\tcategories.on('click', '.item', function (event) {\r\n\t\t\tconst $this = $(this);\r\n\r\n\t\t\tcategoriesChildren.removeClass('selected');\r\n\t\t\t$this.addClass('selected');\r\n\r\n\t\t\tcustomScroller.forEach(function (category) {\r\n\t\t\t\tif ($this.hasClass(category)) {\r\n\t\t\t\t\tshowCustomScroller.call(this, event);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tshowOriginalScroller.call(this, event);\r\n\t\t});\r\n\r\n\t}, 20);\r\n}\r\n\r\nmodule.exports.buildServerSpan = buildServerSpan;\r\nmodule.exports.show = addCustomScrollerParts;\r\n\r\nmodule.exports.setCommonEmojiSpanCache = function (cache) {\r\n\tcommonEmojisSpansCache = cache;\r\n};\r\n",
    "'use strict';\r\n\r\nconst Emoji = require('./emoji.js');\r\n\r\nconst GLOBAL_SERVER_LIST = [];\r\n\r\nconst id = Symbol('id');\r\nconst name = Symbol('name');\r\nconst emojis = Symbol('emojis');\r\nconst sharedEmojis = Symbol('sharedEmojis');\r\nconst permissions = Symbol('permissions');\r\nconst serverRegex = Symbol('serverRegex');\r\n\r\nclass Server {\r\n\tconstructor(_id, _name, _permissions, _emojis = [], _sharedEmojis = []) {\r\n\t\tif (GLOBAL_SERVER_LIST.some(s => s.id === _id)) {\r\n\t\t\tthrow new Error('Cannot have multiple servers with same id!');\r\n\t\t}\r\n\r\n\t\tthis[id] = _id;\r\n\t\tthis[name] = _name;\r\n\t\tthis[permissions] = _permissions;\r\n\t\tthis[emojis] = _emojis;\r\n\t\tthis[sharedEmojis] = _sharedEmojis;\r\n\t\tthis[serverRegex] = new RegExp(`.*/${_id.toString()}/\\\\d+`);\r\n\r\n\t\tGLOBAL_SERVER_LIST.push(this);\r\n\t}\r\n\r\n\taddEmoji(emoji) {\r\n\t\tif (!(emoji instanceof Emoji)) {\r\n\t\t\tthrow new TypeError('Only objects of class Emoji can be added using this method');\r\n\t\t}\r\n\r\n\t\tif (this[emojis].some(e => e.id === emoji.id)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis[emojis].push(emoji);\r\n\r\n\t\tif (emoji.isManaged) {\r\n\t\t\tthis[sharedEmojis].push(emoji);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tget canUseExternalEmojis() {\r\n\t\treturn this[permissions] & 0x00040000;\r\n\t}\r\n\r\n\tget id() {\r\n\t\treturn this[id];\r\n\t}\r\n\r\n\tget name() {\r\n\t\treturn this[name];\r\n\t}\r\n\r\n\tget permissions() {\r\n\t\treturn this[permissions];\r\n\t}\r\n\r\n\tget emojis() {\r\n\t\treturn this[emojis];\r\n\t}\r\n\r\n\tget sharedEmojis() {\r\n\t\treturn this[sharedEmojis];\r\n\t}\r\n\r\n\tisCurrent() {\r\n\t\treturn this[serverRegex].test(window.location);\r\n\t}\r\n\r\n\tavailableEmojis() {\r\n\t\treturn this.isCurrent() ? this.emojis : this.sharedEmojis;\r\n\t}\r\n\r\n\tpossibleEmojis() {\r\n\t\tconst list = this.emojis;\r\n\r\n\t\tfor (const server of GLOBAL_SERVER_LIST) {\r\n\t\t\tif (server.id === this.id) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlist.push(...server.sharedEmojis);\r\n\t\t}\r\n\r\n\t\treturn list;\r\n\t}\r\n\r\n\tstatic getCurrentServer() {\r\n\t\treturn GLOBAL_SERVER_LIST.reduce((p, c) => (p || (c.isCurrent() && c)), false) || null;\r\n\t}\r\n\r\n\tstatic getAllServers() {\r\n\t\treturn GLOBAL_SERVER_LIST;\r\n\t}\r\n\r\n\tstatic getById(id) {\r\n\t\treturn GLOBAL_SERVER_LIST.reduce((p, c) => (p || ((c.id === id) && c)), false) || null;\r\n\t}\r\n}\r\n\r\n// Store \"inbox\" emulation of server\r\nnew Server('@me', '@me', 0x00040000); // eslint-disable-line no-new\r\n\r\nmodule.exports = Server;\r\n"
  ]
}